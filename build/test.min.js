(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Test = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

module.exports = require('./lib').default;

},{"./lib":2}],2:[function(require,module,exports){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _storage2 = require("../vendor/storage");

var _storage3 = _interopRequireDefault(_storage2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var supportsClasslist = "classList" in document.createElement("_");

var Test = (function () {
  function Test(name) {
    var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    _classCallCheck(this, Test);

    options = {
      persist: typeof options.persist !== "undefined" ? options.persist : true,
      active: typeof options.active !== "undefined" ? options.active : true,
      chosen: typeof options.chosen !== "undefined" ? options.chosen : false
    };

    if (!name) {
      throw new Error('Tests must have a name');
    }

    // Return if inactive
    if (!options.active) {
      return {
        active: false
      };
    }

    // Set test name
    var storageKey = 'test-' + name;
    var bucket = undefined;

    // Retrieve Bucket from storage if possible
    if (options.persist && _storage3.default.local.getItem(storageKey)) {
      bucket = _storage3.default.local.getItem(storageKey);
    }

    // Determine bucket
    else {

        // Get a list of test names and test weights
        var names = Object.keys(data);
        var weights = [];
        for (var i = 0; i < names.length; i++) {
          if (typeof data[names[i]].weight == "undefined") data[names[i]].weight = 1;
          weights.push(data[names[i]].weight);
        }

        // Select a random weighted bucket
        bucket = Test.chooseWeightedItem(names, weights);

        // Save
        _storage3.default.local.setItem(storageKey, bucket);
      }

    // We've now bucketed our user
    // Add classname
    if (supportsClasslist) {
      document.body.classList.add(name, bucket);
    } else {
      document.body.className += " " + name + " " + bucket;
    }

    var info = {
      bucket: bucket,
      data: data[bucket],
      active: true
    };

    // Call function if provided
    if (data[bucket]) {
      if (!data[bucket].chosen) data[bucket].chosen = Test.noop;
      data[bucket].chosen.call(this);
    }

    // Call chosen function
    if (options.chosen) {
      options.chosen.call(this, info);
    }

    // Record test with GTM if possible
    if (typeof dataLayer !== "undefined") {
      var metrics = {
        abTests: {}
      };
      metrics.abTests[name] = bucket;
      dataLayer.push(metrics);
    }

    // Return
    return info;
  }

  _createClass(Test, null, [{
    key: "chooseWeightedItem",
    value: function chooseWeightedItem(names, weights) {

      // Total out the number of weights
      var total = 0,
          i;
      for (i = 0; i < weights.length; i++) {
        total += weights[i];
      }

      var sum = 0;

      // Get a random number between 0 and the total number of weights
      var n = Test.rand(0, total);

      // Loop until we've encountered the first weight greater than our random number
      for (i = 0; i < names.length; i++) {
        sum += weights[i];

        if (n <= sum) {
          return names[i];
        }
      }
    }
  }, {
    key: "noop",
    value: function noop() {}
  }, {
    key: "rand",
    value: function rand(min, max) {
      return Math.random() * (max - min) + min;
    }
  }, {
    key: "storage",
    value: function storage() {
      return _storage3.default;
    }
  }]);

  return Test;
})();

exports.default = Test;

},{"../vendor/storage":3}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
function Storage(type) {
  function createCookie(name, value, days) {
    var date, expires;

    if (days) {
      date = new Date();
      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
      expires = "; expires=" + date.toGMTString();
    } else {
      expires = "";
    }
    document.cookie = name + "=" + value + expires + "; path=/";
  }

  function readCookie(name) {
    var nameEQ = name + "=",
        ca = document.cookie.split(';'),
        i,
        c;

    for (i = 0; i < ca.length; i++) {
      c = ca[i];
      while (c.charAt(0) == ' ') {
        c = c.substring(1, c.length);
      }

      if (c.indexOf(nameEQ) == 0) {
        return c.substring(nameEQ.length, c.length);
      }
    }
    return null;
  }

  function setData(data) {
    data = JSON.stringify(data);
    if (type == 'session') {
      window.name = data;
    } else {
      createCookie('localStorage', data, 365);
    }
  }

  function clearData() {
    if (type == 'session') {
      window.name = '';
    } else {
      createCookie('localStorage', '', 365);
    }
  }

  function getData() {
    var data = type == 'session' ? window.name : readCookie('localStorage');
    return data ? JSON.parse(data) : {};
  }

  // initialise if there's already data
  var data = getData();

  return {
    length: 0,
    clear: function clear() {
      data = {};
      this.length = 0;
      clearData();
    },
    getItem: function getItem(key) {
      return data[key] === undefined ? null : data[key];
    },
    key: function key(i) {
      // not perfect, but works
      var ctr = 0;
      for (var k in data) {
        if (ctr == i) return k;else ctr++;
      }
      return null;
    },
    removeItem: function removeItem(key) {
      delete data[key];
      this.length--;
      setData(data);
    },
    setItem: function setItem(key, value) {
      data[key] = value + ''; // forces the value to a string
      this.length++;
      setData(data);
    }
  };
};

exports.default = {
  local: window.localStorage || new Storage('local'),
  session: window.sessionStorage || new Storage('session')
};

},{}]},{},[1])(1)
});